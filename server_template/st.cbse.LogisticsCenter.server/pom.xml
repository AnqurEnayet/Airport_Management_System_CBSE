<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>st.cbse</groupId>
    <artifactId>LogisticsCenter.server</artifactId> <!-- added ".server" to match JDNI with client -->
    <version>0.1</version>
    <packaging>war</packaging>
    <name>st.cbse.LogisticsCenter.server</name>


    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.report.sourceEncoding>UTF-8</project.report.sourceEncoding>
        <maven.compiler.release>21</maven.compiler.release>
        <jakartaee-api.version>10.0.0</jakartaee-api.version>
        <wildfly.version>30.0.1.Final</wildfly.version>
        <compiler-plugin.version>3.11.0</compiler-plugin.version>
        <war-plugin.version>3.4.0</war-plugin.version>
        <wildfly-plugin.version>4.2.1.Final</wildfly-plugin.version>
        <!-- NEW LINE TO ADD: Define the version for the maven-jar-plugin -->
        <maven-jar-plugin.version>3.3.0</maven-jar-plugin.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>jakarta.jakartaee-api</artifactId>
            <version>${jakartaee-api.version}</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.name}</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${compiler-plugin.version}</version>
            </plugin>
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>${war-plugin.version}</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>

            <!-- Execute 'mvn clean package wildfly:dev' to run the application. -->
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <version>${wildfly-plugin.version}</version>
                <configuration>
                    <version>${wildfly.version}</version>
                    <server-config>standalone-full.xml</server-config>
                </configuration>
            </plugin>

            <!-- Adding this part to the template for the newly added interfaces and components to be recognized Â -->
            <!-- This plugin creates a separate JAR file containing only the remote interfaces
                 and data/entity classes from the server project. This JAR will be consumed by the client project,
                 allowing it to compile against these shared contracts without needing the full server WAR. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven-jar-plugin.version}</version>
                <executions>
                    <execution>
                        <id>create-client-jar</id> <!-- Added ID for clarity, especially with multiple executions -->
                        <phase>package</phase> <!-- This goal runs during the 'package' phase -->
                        <goals>
                            <goal>jar</goal> <!-- The goal is to build a JAR -->
                        </goals>
                        <configuration>
                            <!-- CRUCIAL CHANGE: Classifier for the client-facing JAR.
                                 This must match what the client project expects ('client'). -->
                            <classifier>client</classifier> 
                            <includes>
                                <!-- Includes all compiled .class files from the server's 'start.interfaces' packages -->
                                <include>st/cbse/logisticscenter/**/server/start/interfaces/**/*.class</include>
                                <!-- Includes all compiled .class files from the server's 'start.data' packages -->
                                <include>st/cbse/logisticscenter/**/server/start/data/**/*.class</include>
                            </includes>
                            <excludes>
                                <!-- Excludes compiled .class files from the server's 'start.beans' packages
                                     (the EJB implementations) as these are not needed by the client. -->
                                <exclude>st/cbse/logisticscenter/**/server/start/beans/**/*.class</exclude>
                                <!-- Excludes persistence.xml as it's a server-side configuration file. -->
                                <exclude>META-INF/persistence.xml</exclude>
                            </excludes>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>